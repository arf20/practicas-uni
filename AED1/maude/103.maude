***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .

   op producto : N N -> N .
   op potencia : N N -> N .
   op cuadrado : N -> N .
   op factorial : N -> N .

   op predecesor : N -> N .
   op resta : N N -> N .
   op diferencia : N N -> N .
   op difUno : N N -> Bool .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m : N .

   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .

   eq producto(cero, n) = cero .
   eq producto(sucesor(n), m) = suma(producto(n, m), m) .
   eq potencia(cero, cero) = NODEFINIDO .
   eq potencia(n, cero) = sucesor(cero) .
   eq potencia(cero, n) = cero .
   eq potencia(n, sucesor(cero)) = n .
   eq potencia(n, sucesor(m)) = producto(potencia(n, m), n) .
   eq cuadrado(n) = producto(n, n) .
   eq factorial(cero) = sucesor(cero) .
   eq factorial(sucesor(cero)) = sucesor(cero) .
   eq factorial(sucesor(n)) = producto(factorial(n), sucesor(n)) .

   eq predecesor(sucesor(n)) = n .
   eq predecesor(cero) = NEGATIVO .
   eq resta(n, cero) = n .
   eq resta(cero, n) = NEGATIVO .
<<<<<<< Updated upstream
   eq resta(sucesor(n), cero) = sucesor(n) .
   eq resta(cero, sucesor(n)) = NEGATIVO .
   eq resta(sucesor(n), sucesor(m)) = resta(n, m) .

   eq diferencia(cero, n) = n .
   eq diferencia(n, cero) = n .
   eq diferencia(sucesor(n), sucesor(m)) = diferencia(m, n) .

   eq difUno(cero, cero) = true .
   eq difUno(sucesor(cero), cero) = true .
   eq difUno(cero, sucesor(cero)) = true .
   eq difUno(sucesor(sucesor(n)), cero) = false .
   eq difUno(cero, sucesor(sucesor(n))) = false .
   eq difUno(sucesor(n), sucesor(m)) = difUno(n, m) .
=======
   eq resta(n, sucesor(m)) = predecesor(resta(n, m)) .
   eq diferencia(n, n) = cero .
   eq diferencia(n, m) = diferencia(m, n) . 
   eq diferencia(n, m) = resta(m, n) .
   eq difUno(n, n) = true .
   eq difUno(n, m) = difUno(m, n) .
   eq difUno(n, sucesor(n)) = true .
   eq difUno(n, sucesor(sucesor(n))) = false .


>>>>>>> Stashed changes
endfm
