***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
    protecting BOOL .
    sort N .
    sort NoN .
    subsort NoN < N .

***************** SINTAXIS *****************
    op cero : -> N .
    op sucesor : N -> N .
    op suma : N N -> N .
    op esCero : N -> Bool .
    op esIgual : N N -> Bool .
    op esDistinto : N N -> Bool .

    op producto : N N -> N .
    op potencia : N N -> N .
    op cuadrado : N -> N .
    op factorial : N -> N .

    op predecesor : N -> N .
    op resta : N N -> N .
    op diferencia : N N -> N .
    op difUno : N N -> Bool .

    op esMenor : N N -> Bool .
    op esMenorIgual : N N -> Bool .
    op esMayor : N N -> Bool .
    op esMayorIgual : N N -> Bool .
    op maximo : N N -> N .
    op minimo : N N -> N .

    op division : N N -> N .
    op modulo : N N -> N .
    op mitad : N -> N .
    op esPar : N -> Bool .

    op NODEFINIDO : -> NoN .
    op INFINITO : -> NoN .
    op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
    var n m : N .

    eq suma(cero, n) = n .
    eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
    eq esCero(cero) = true .
    eq esCero(sucesor(n)) = false .
    eq esIgual(cero, n) = esCero(n) .
    eq esIgual(sucesor(n), cero) = false .
    eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
    eq esDistinto(n, m) = not esIgual(n, m) .

    eq producto(cero, n) = cero .
    eq producto(sucesor(n), m) = suma(producto(n, m), m) .
    eq potencia(cero, cero) = NODEFINIDO .
    eq potencia(n, cero) = sucesor(cero) .
    eq potencia(cero, n) = cero .
    eq potencia(n, sucesor(cero)) = n .
    eq potencia(n, sucesor(m)) = producto(potencia(n, m), n) .
    eq cuadrado(n) = producto(n, n) .
    eq factorial(cero) = sucesor(cero) .
    eq factorial(sucesor(cero)) = sucesor(cero) .
    eq factorial(sucesor(n)) = producto(factorial(n), sucesor(n)) .

    eq predecesor(sucesor(n)) = n .
    eq predecesor(cero) = NEGATIVO .
    eq resta(n, cero) = n .
    eq resta(cero, n) = NEGATIVO .
    eq resta(sucesor(n), cero) = sucesor(n) .
    eq resta(cero, sucesor(n)) = NEGATIVO .
    eq resta(sucesor(n), sucesor(m)) = resta(n, m) .
    eq diferencia(cero, n) = n .
    eq diferencia(n, cero) = n .
    eq diferencia(sucesor(n), sucesor(m)) = diferencia(m, n) .
    eq difUno(cero, cero) = true .
    eq difUno(sucesor(cero), cero) = true .
    eq difUno(cero, sucesor(cero)) = true .
    eq difUno(sucesor(sucesor(n)), cero) = false .
    eq difUno(cero, sucesor(sucesor(n))) = false .
    eq difUno(sucesor(n), sucesor(m)) = difUno(n, m) .


    eq esMenor(cero, cero) = false .
    eq esMenor(cero, sucesor(n)) = true .
    eq esMenor(sucesor(n), cero) = false .
    eq esMenor(sucesor(n), sucesor(m)) = esMenor(n, m) .
    eq esMayor(cero, cero) = false .
    eq esMayor(cero, sucesor(n)) = false .
    eq esMayor(sucesor(n), cero) = true .
    eq esMayor(sucesor(n), sucesor(m)) = esMayor(n, m) .
    eq esMenorIgual(cero, cero) = true .
    eq esMenorIgual(cero, sucesor(n)) = true .
    eq esMenorIgual(sucesor(n), cero) = false .
    eq esMenorIgual(sucesor(n), sucesor(m)) = esMenorIgual(n, m) .
    eq esMayorIgual(cero, cero) = true .
    eq esMayorIgual(cero, sucesor(n)) = false .
    eq esMayorIgual(sucesor(n), cero) = true .
    eq esMayorIgual(sucesor(n), sucesor(m)) = esMayorIgual(n, m) .
    eq maximo(cero, cero) = cero .
    eq maximo(sucesor(n), cero) = sucesor(n) .
    eq maximo(cero, sucesor(n)) = sucesor(n) .
    eq maximo(sucesor(n), sucesor(m)) = sucesor(maximo(n, m)) .
    eq minimo(cero, cero) = cero .
    eq minimo(sucesor(n), cero) = cero .
    eq minimo(cero, sucesor(n)) = cero .
    eq minimo(sucesor(n), sucesor(m)) = sucesor(minimo(n, m)) .
    
    eq division(cero, cero) = NODEFINIDO .
    eq division(n, cero) = INFINITO .
    eq division(cero, n) = cero .
    eq division(n, sucesor(cero)) = n .
    eq division(n, n) = sucesor(cero) .
    eq division(producto(n, m), n) = m .
    eq division(n, m) = if esMenor(n, m) then cero else suma(division(resta(n, m), m), sucesor(cero)) fi .

    eq modulo(n, cero) = NODEFINIDO .
    eq modulo(cero, n) = cero .
    eq modulo(n, m) = if esMenor(n, m) then n else diferencia(n, producto(m, division(n, m))) fi .

    eq mitad(n) = division(n, sucesor(sucesor(cero))) .

    eq esPar(n) = if esIgual(modulo(n, sucesor(sucesor(cero))), cero) then true else false fi .
    
endfm


***************** NOMBRE *******************
fmod VOCAL is

***************** CONJUNTOS ****************
    protecting BOOL .
    sort V .

***************** SINTAXIS *****************
    ops A E I O U : -> V .
    op esIgual : V V -> Bool .
    op esDistinta : V V -> Bool .
    op esMenor : V V -> Bool .

***************** SEMANTICA ****************
    var v w : V .

    eq esIgual(v, v) = true .
    eq esIgual(v, w) = false .
    eq esDistinta(v, w) = not esIgual(v, w) .
    eq esMenor(v, v) = false .
    eq esMenor(A, v) = true .
    eq esMenor(v, A) = false .
    eq esMenor(E, v) = true .
    eq esMenor(v, E) = false .
    eq esMenor(I, v) = true .
    eq esMenor(v, I) = false .
    eq esMenor(O, v) = true .
    eq esMenor(v, O) = false .
    eq esMenor(U, v) = true .
    eq esMenor(v, U) = false .
endfm

***************** NOMBRE *******************
fmod LISTA is

***************** CONJUNTOS ****************
    protecting BOOL .
    protecting NATURAL .
    protecting VOCAL .
    sort L .
    sort MensajeListas .
    subsorts MensajeListas < V .

***************** SINTAXIS *****************
    op listaVacia : -> L .
    op esVacia : L -> Bool .
    op insertar : V L -> L .
    op insertarFinal : V L -> L .
    op tamano : L -> N .

    op primero : L -> V .
    op ultimo : L -> V .
    op cabeza : L -> L .
    op cola : L -> L .

    op invertir : L -> L .
    op concatenar : L L -> L .
    op insertarVarias : V N L -> L .
    op lista : V -> L .
    op lista : V V -> L .
    op lista : V V V -> L .
    
    op ErrorListaVacia : -> MensajeListas .

***************** SEMANTICA ****************
    var l k : L .
    var u v w : V .
    var n : N .

    eq esVacia(listaVacia) = true .
    eq esVacia(insertar(v, l)) = false .
    eq insertarFinal(v, listaVacia) = insertar(v, listaVacia) .
    eq insertarFinal(v, insertar(w, l)) = insertar(w, insertarFinal(v, l)) .
    eq tamano(listaVacia) = cero .
    eq tamano(insertar(v, l)) = sucesor(tamano(l)) .

    eq primero(listaVacia) = ErrorListaVacia .
    eq primero(insertar(v, l)) = v .
    
    eq ultimo(listaVacia) = ErrorListaVacia .
    eq ultimo(insertar(v, listaVacia)) = v .
    eq ultimo(insertar(v, l)) = ultimo(l) .

    eq cabeza(listaVacia) = listaVacia .
    eq cabeza(insertar(v, listaVacia)) = listaVacia .
    eq cabeza(insertar(v, l)) = insertar(v, cabeza(l)) .

    eq cola(listaVacia) = listaVacia .
    eq cola(insertar(v, l)) = l .
    
    eq invertir(listaVacia) = listaVacia .
    eq invertir(l) = insertar(ultimo(l), invertir (cabeza(l))) .
    
    eq concatenar(listaVacia, k) = k .
    eq concatenar(l, listaVacia) = l .
    eq concatenar(insertar(v, l), k) = insertar(v, concatenar(l, k)) .
    
    eq insertarVarias(v, cero, l) = l .
    eq insertarVarias(v, sucesor(n), l) = insertar (v, insertarVarias(v, n, l)) .
    
    eq lista(v) = insertar(v, listaVacia) .
    eq lista(v, w) = insertar(v, insertar(w, listaVacia)) .
    eq lista(u, v, w) = insertar(u, insertar(v, insertar(w, listaVacia))) .
    
endfm

***************** NOMBRE *******************
fmod BOLSA is

***************** CONJUNTOS ****************
    protecting BOOL .
    protecting NATURAL .
    protecting VOCAL .
    sort B .

***************** SINTAXIS *****************
    op bolsaVacia : -> B .
    op esVacia : B -> Bool .
    op insertar : V B -> B .
    op contar : V B -> N .
    op eliminar : V B -> B .

    op esMiembro : V B -> Bool .
    op tamano : B -> N .

    op union : B B -> B .
    op interseccion : B B -> B .
    op diferencia : B B -> B .
    op esIgual : B B -> Bool .


***************** SEMANTICA ****************
    var v w : V .
    var b c : B .

    eq esVacia(bolsaVacia) = true .
    eq esVacia(insertar(v, b)) = false .
    eq contar(v, bolsaVacia) = cero .
    eq contar(v, insertar(w, c)) = if esIgual(v, w) then sucesor(contar(v, c)) else contar(v, c) fi .
    eq eliminar(v, bolsaVacia) = bolsaVacia .
    eq eliminar(v, insertar(v, c)) = c .
    eq eliminar(v, insertar(w, c)) = insertar(w, eliminar(v, c)) .

    eq union(bolsaVacia, bolsaVacia) = bolsaVacia .
    eq union(bolsaVacia, insertar(v, bolsaVacia)) = insertar(v, bolsaVacia) .
    eq union(insertar(v, bolsaVacia), bolsaVacia) = insertar(v, bolsaVacia) .
    eq union(insertar(v, b), insertar(v, c)) = insertar(v, insertar(v, union(b, c))) .
    eq union(insertar(v, b), c) = insertar(v, union(b, c)) .
    eq union(b, insertar(v, c)) = insertar(v, union(b, c)) .

    eq esMiembro(v, bolsaVacia) = false .
    eq esMiembro(v, insertar(w, c)) = esIgual(v, w) or esMiembro(v, c) .
    
    eq interseccion(bolsaVacia, bolsaVacia) = bolsaVacia .
    eq interseccion(bolsaVacia, c) = bolsaVacia .
    eq interseccion(c, bolsaVacia) = bolsaVacia .
    eq interseccion(b, insertar(v, c)) = if esMayorIgual(contar(v, b), contar(v, insertar(v, c))) then insertar(v, interseccion(b, c)) else interseccion(b, c) fi .

    eq diferencia(bolsaVacia, b) = bolsaVacia .
    eq diferencia(b, bolsaVacia) = b .
    eq diferencia(b, insertar(v, c)) = eliminar(v, diferencia(b, c)) .

    eq tamano(bolsaVacia) = cero .
    eq tamano(insertar(v, b)) = sucesor(tamano(b)) .

    eq esIgual(bolsaVacia, bolsaVacia) = true .
    eq esIgual(bolsaVacia, b) = false .
    eq esIgual(b, bolsaVacia) = false .
    eq esIgual(b, c) = if esVacia(diferencia(b, c)) then if esVacia(diferencia(c, b)) then true else false fi else false fi .

endfm

***************** NOMBRE *******************
fmod ARBOL is
***************** NOMBRE *******************
    protecting BOOL .
    protecting NATURAL .
    protecting VOCAL .
    protecting LISTA .
    protecting BOLSA .
    sort A .

***************** SINTAXIS *****************
    op arbolVacio : -> A .
    op esVacio : A -> Bool .
    op construir : V A A -> A .
    op construirRaiz : V -> A .
    op numNodos : A -> N .
    op altura : A -> N .
    op MAX : N N -> N .
    
    op preOrden : A -> L .
    op inOrden : A -> L .
    op postOrden : A -> L .

***************** SEMANTICA ****************
    var a a1 a2 : A .
    var n m : N .
    var v : V .
    
    eq esVacio(construir(v, a1, a2)) = false .
    eq esVacio(arbolVacio) = true .

    eq construirRaiz(v) = construir(v, arbolVacio, arbolVacio) .

    eq MAX(n, cero) = n .
    eq MAX(cero, n) = n .
    eq MAX(sucesor(m), sucesor(n)) = sucesor(MAX(m, n)) .
    eq altura(arbolVacio) = cero .
    eq altura(construir(v, a1, a2)) = sucesor(MAX(altura(a1), altura(a2))) .

    eq numNodos(arbolVacio) = cero .
    eq numNodos(construir(v, a1, a2)) = sucesor(suma(numNodos(a1), numNodos(a2))) .

    eq preOrden(arbolVacio) = listaVacia .
    eq preOrden(construir(v, a1, a2)) = concatenar(lista(v), concatenar(preOrden(a1), preOrden(a2))) .

    eq inOrden(arbolVacio) = listaVacia .
    eq inOrden(construir(v, a1, a2)) = concatenar(inOrden(a1), concatenar(lista(v), inOrden(a2))) .

    eq postOrden(arbolVacio) = listaVacia .
    eq postOrden(construir(v, a1, a2)) = concatenar(postOrden(a1), concatenar(postOrden(a2), lista(v))) .

endfm

