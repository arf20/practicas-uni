***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .

   op producto : N N -> N .
   op potencia : N N -> N .
   op cuadrado : N -> N .
   op factorial : N -> N .

   op predecesor : N -> N .
   op resta : N N -> N .
   op diferencia : N N -> N .
   op difUno : N N -> Bool .

   op esMenor : N N -> Bool .
   op esMenorIgual : N N -> Bool .
   op esMayor : N N -> Bool .
   op esMayorIgual : N N -> Bool .
   op maximo : N N -> N .
   op minimo : N N -> N .

   op division : N N -> N .
   op modulo : N N -> N .
   op mitad : N -> N .
   op esPar : N -> Bool .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m : N .

   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .

   eq producto(cero, n) = cero .
   eq producto(sucesor(n), m) = suma(producto(n, m), m) .
   eq potencia(cero, cero) = NODEFINIDO .
   eq potencia(n, cero) = sucesor(cero) .
   eq potencia(cero, n) = cero .
   eq potencia(n, sucesor(cero)) = n .
   eq potencia(n, sucesor(m)) = producto(potencia(n, m), n) .
   eq cuadrado(n) = producto(n, n) .
   eq factorial(cero) = sucesor(cero) .
   eq factorial(sucesor(cero)) = sucesor(cero) .
   eq factorial(sucesor(n)) = producto(factorial(n), sucesor(n)) .

   eq predecesor(sucesor(n)) = n .
   eq predecesor(cero) = NEGATIVO .
   eq resta(n, cero) = n .
   eq resta(cero, n) = NEGATIVO .
   eq resta(sucesor(n), cero) = sucesor(n) .
   eq resta(cero, sucesor(n)) = NEGATIVO .
   eq resta(sucesor(n), sucesor(m)) = resta(n, m) .
   eq diferencia(cero, n) = n .
   eq diferencia(n, cero) = n .
   eq diferencia(sucesor(n), sucesor(m)) = diferencia(m, n) .
   eq difUno(cero, cero) = true .
   eq difUno(sucesor(cero), cero) = true .
   eq difUno(cero, sucesor(cero)) = true .
   eq difUno(sucesor(sucesor(n)), cero) = false .
   eq difUno(cero, sucesor(sucesor(n))) = false .
   eq difUno(sucesor(n), sucesor(m)) = difUno(n, m) .


   eq esMenor(cero, cero) = false .
   eq esMenor(cero, sucesor(n)) = true .
   eq esMenor(sucesor(n), cero) = false .
   eq esMenor(sucesor(n), sucesor(m)) = esMenor(n, m) .
   eq esMayor(cero, cero) = false .
   eq esMayor(cero, sucesor(n)) = false .
   eq esMayor(sucesor(n), cero) = true .
   eq esMayor(sucesor(n), sucesor(m)) = esMayor(n, m) .
   eq esMenorIgual(cero, cero) = true .
   eq esMenorIgual(cero, sucesor(n)) = true .
   eq esMenorIgual(sucesor(n), cero) = false .
   eq esMenorIgual(sucesor(n), sucesor(m)) = esMenorIgual(n, m) .
   eq esMayorIgual(cero, cero) = true .
   eq esMayorIgual(cero, sucesor(n)) = false .
   eq esMayorIgual(sucesor(n), cero) = true .
   eq esMayorIgual(sucesor(n), sucesor(m)) = esMayorIgual(n, m) .
   eq maximo(cero, cero) = cero .
   eq maximo(sucesor(n), cero) = sucesor(n) .
   eq maximo(cero, sucesor(n)) = sucesor(n) .
   eq maximo(sucesor(n), sucesor(m)) = sucesor(maximo(n, m)) .
   eq minimo(cero, cero) = cero .
   eq minimo(sucesor(n), cero) = cero .
   eq minimo(cero, sucesor(n)) = cero .
   eq minimo(sucesor(n), sucesor(m)) = sucesor(minimo(n, m)) .
   
   eq division(cero, cero) = NODEFINIDO .
   eq division(n, cero) = INFINITO .
   eq division(cero, n) = cero .
   eq division(n, sucesor(cero)) = n .
   eq division(n, n) = sucesor(cero) .
   eq division(producto(n, m), n) = m .
   eq division(n, m) = if esMenor(n, m) then cero else suma(division(resta(n, m), m), sucesor(cero)) fi .

   eq modulo(n, cero) = NODEFINIDO .
   eq modulo(cero, n) = cero .
   eq modulo(n, m) = if esMenor(n, m) then n else diferencia(n, producto(m, division(n, m))) fi .

   eq mitad(n) = division(n, sucesor(sucesor(cero))) .

   eq esPar(n) = if esIgual(modulo(n, sucesor(sucesor(cero))), cero) then true else false fi .
   
   
endfm
