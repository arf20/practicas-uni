***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
    protecting BOOL .
    sort N .
    sort NoN .
    subsort NoN < N .

***************** SINTAXIS *****************
    op cero : -> N .
    op sucesor : N -> N .
    op suma : N N -> N .
    op esCero : N -> Bool .
    op esIgual : N N -> Bool .
    op esDistinto : N N -> Bool .

    op NODEFINIDO : -> NoN .
    op INFINITO : -> NoN .
    op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
    var n m : N .

    eq suma(cero, n) = n .
    eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
    eq esCero(cero) = true .
    eq esCero(sucesor(n)) = false .
    eq esIgual(cero, n) = esCero(n) .
    eq esIgual(sucesor(n), cero) = false .
    eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
    eq esDistinto(n, m) = not esIgual(n, m) .
endfm


***************** NOMBRE *******************
fmod VOCAL is

***************** CONJUNTOS ****************
    protecting BOOL .
    sort V .

***************** SINTAXIS *****************
    ops A E I O U : -> V .
    op esIgual : V V -> Bool .
    op esDistinta : V V -> Bool .
    op esMenor : V V -> Bool .

***************** SEMANTICA ****************
    var v w : V .

    eq esIgual(v, v) = true .
    eq esIgual(v, w) = false .
    eq esDistinta(v, w) = not esIgual(v, w) .
    eq esMenor(v, v) = false .
    eq esMenor(A, v) = true .
    eq esMenor(v, A) = false .
    eq esMenor(E, v) = true .
    eq esMenor(v, E) = false .
    eq esMenor(I, v) = true .
    eq esMenor(v, I) = false .
    eq esMenor(O, v) = true .
    eq esMenor(v, O) = false .
    eq esMenor(U, v) = true .
    eq esMenor(v, U) = false .
endfm


***************** NOMBRE *******************
fmod CONJUNTO is

***************** CONJUNTOS ****************
    protecting BOOL .
    protecting NATURAL .
    protecting VOCAL .
    sort C .

***************** SINTAXIS *****************
    op cjtoVacio : -> C .
    op esVacio : C -> Bool .
    op insertar : V C -> C .
    op esMiembro : V C -> Bool .
    op tamano : C -> N .

    op union : C C -> C .
    op interseccion : C C -> C .
    op diferencia : C C -> C .
    op eliminar : V C -> C .

    op esIgual : C C -> Bool .
    op esMenor : C C -> Bool .
    op esMenorIgual : C C -> Bool .
    op disjuntos : C C -> Bool .

***************** SEMANTICA ****************
    var v w : V .
    var c d : C .

    eq esVacio(cjtoVacio) = true .
    eq esVacio(insertar(v, c)) = false .
    eq esMiembro(v, cjtoVacio) = false .
    eq esMiembro(v, insertar(w, c)) = esIgual(v, w) or esMiembro(v, c) .
    eq tamano(cjtoVacio) = cero .
    eq tamano(insertar(v, c)) = suma(tamano(c),
        if esMiembro(v, c) then cero else sucesor(cero) fi ) .

    eq union(cjtoVacio, cjtoVacio) = cjtoVacio .
    eq union(cjtoVacio, insertar(v, cjtoVacio)) = insertar(v, cjtoVacio) .
    eq union(insertar(v,cjtoVacio), cjtoVacio) = insertar(v, cjtoVacio) .
    eq union(insertar(v, c), insertar(v, d)) = insertar(v, union(c, d)) .
    eq union(insertar(v, c), d) = insertar(v, union(c, d)) .
    eq union(c, insertar(v, d)) = insertar(v, union(c, d)) .
    eq interseccion(cjtoVacio, cjtoVacio) = cjtoVacio .
    eq interseccion(cjtoVacio, c) = cjtoVacio .
    eq interseccion(c, cjtoVacio) = cjtoVacio .
    eq interseccion(c, insertar(v, d)) = if esMiembro(v, c) then insertar(v, interseccion(c, d)) else interseccion(c, d) fi .
    eq diferencia(cjtoVacio, cjtoVacio) = cjtoVacio .
    eq diferencia(insertar(v, cjtoVacio), cjtoVacio) = insertar(v, cjtoVacio) .
    eq diferencia(insertar(v, cjtoVacio), insertar(v, cjtoVacio)) = cjtoVacio .
    eq diferencia(cjtoVacio, insertar(v, cjtoVacio)) = cjtoVacio .
    eq diferencia(c, c) = cjtoVacio .
    eq diferencia(insertar(v, c), d) = if esMiembro(v, d) then diferencia(c, d) else insertar(v, diferencia(c, d)) fi .
    eq diferencia(c, insertar(v, d)) = diferencia(c, d) .
    eq eliminar(v, cjtoVacio) = cjtoVacio .
    eq eliminar(v, insertar(v, cjtoVacio)) = cjtoVacio .
    eq eliminar(v, c) = diferencia(c, insertar(v, cjtoVacio)) .

    eq esIgual(cjtoVacio, cjtoVacio) = true .
    eq esIgual(insertar(v, cjtoVacio), cjtoVacio) = false .
    eq esIgual(cjtoVacio, insertar(v, cjtoVacio)) = false .
    eq esIgual(c, d) = if esIgual(tamano(union(c, d)), tamano(c)) then if esIgual(tamano(union(c, d)), tamano(d)) then true else false fi else false fi .
    eq esMenor(cjtoVacio, insertar(v, cjtoVacio)) = true .
    eq esMenor(c, d) = if not esIgual(tamano(union(c, d)), tamano(c)) then if esIgual(interseccion(c, d), c) then true else false fi else false fi .
    eq esMenorIgual(cjtoVacio, cjtoVacio) = true .
    eq esMenorIgual(cjtoVacio, insertar(v, cjtoVacio)) = true .
    eq esMenorIgual(insertar(v, cjtoVacio), cjtoVacio) = false .
    eq esMenorIgual(c, d) = if esIgual(c, d) then true else if esIgual(interseccion(c, d), c) then true else false fi fi .
    eq disjuntos(c, d) = if esIgual(tamano(interseccion(c, d)), cero) then true else false fi .
endfm
