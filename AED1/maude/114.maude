***************** NOMBRE *******************
fmod VOCAL is

***************** CONJUNTOS ****************
    protecting BOOL .
    sort V .

***************** SINTAXIS *****************
    ops A E I O U : -> V .
    op esIgual : V V -> Bool .
    op esDistinta : V V -> Bool .
    op esMenor : V V -> Bool .

***************** SEMANTICA ****************
    var v w : V .

    eq esIgual(v, v) = true .
    eq esIgual(v, w) = false .
    eq esDistinta(v, w) = not esIgual(v, w) .

    eq esMenor(v, v) = false .
    eq esMenor(A, v) = true .
    eq esMenor(v, A) = false .
    eq esMenor(E, v) = true .
    eq esMenor(v, E) = false .
    eq esMenor(I, v) = true .
    eq esMenor(v, I) = false .
    eq esMenor(O, v) = true .
    eq esMenor(v, O) = false .
    eq esMenor(U, v) = true .
    eq esMenor(v, U) = false .
endfm


***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m : N .

   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .

endfm



***************** NOMBRE *******************
fmod COLA is

***************** CONJUNTOS ****************
    protecting BOOL .
    protecting VOCAL .
    protecting NATURAL .
    sort MensajeColas .
    sort C .
    subsorts MensajeColas < V .

***************** SINTAXIS *****************
    op colaVacia : -> C .
    op esVacia : C -> Bool .
    op meter : V C -> C .
    op sacar : C -> C .
    op cabecera : C -> V .

    op meterVarias : V N C -> C .
    op sacarVarias : N C -> C .
    op esIgual : C C -> Bool .
    op tamano : C -> N .

    op ERRORCOLAVACIA : -> MensajeColas .

***************** SEMANTICA ****************
    var c d : C .
    var v w : V .
    var n : N .

    eq esVacia(colaVacia) = true .
    eq esVacia(meter(v, c)) = false .
    eq sacar(colaVacia) = colaVacia .
    eq sacar(meter(v, colaVacia)) = colaVacia .
    eq sacar(meter(v, c)) = meter(v, sacar(c)) .
    eq cabecera(colaVacia) = ERRORCOLAVACIA .
    eq cabecera(meter(v, colaVacia)) = v .
    eq cabecera(meter(v, c)) = cabecera(c) .

    eq meterVarias(v, cero, c) = c .
    eq meterVarias(v, sucesor(cero), c) = meter(v, c) .
    eq meterVarias(v, sucesor(n), c) = meter(v, meterVarias(v, n, c)) .
    eq sacarVarias(cero, c) = c .
    eq sacarVarias(sucesor(cero), c) = sacar(c) .
    eq sacarVarias(sucesor(n), c) = sacar(sacarVarias(n, c)) .
    eq esIgual(colaVacia, colaVacia) = true .
    eq esIgual(meter(v, colaVacia), meter(v, colaVacia)) = true .
    eq esIgual(meter(v, colaVacia), colaVacia) = false .
    eq esIgual(colaVacia, meter(v, colaVacia)) = false .
    eq esIgual(meter(v, colaVacia), meter(w, colaVacia)) = false .
    eq esIgual(meter(v, c), meter(v, c)) = true .
    eq esIgual(meter(v, c), meter(w, c)) = false .
    eq esIgual(meter(v, c), c) = false .
    eq esIgual(c, meter(v, c)) = false .
    eq esIgual(c, c) = true .
    eq esIgual(c, d) = false .
    eq tamano(colaVacia) = cero .
    eq tamano(meter(v, colaVacia)) = sucesor(cero) .
    eq tamano(meter(v, c)) = sucesor(tamano(c)) .



endfm

