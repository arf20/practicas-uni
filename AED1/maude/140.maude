***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m : N .

   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .
endfm

***************** NOMBRE *******************
fmod VOCAL is

***************** NOMBRE *******************
    protecting BOOL .
    sort V .

***************** SINTAXIS *****************
    ops A E I O U : -> V .
    op esIgual : V V -> Bool .
    op esDistinta : V V -> Bool .
    op esMenor : V V -> Bool .

***************** SEMANTICA ****************
    var v w : V .

    eq esIgual(v, v) = true .
    eq esIgual(v, w) = false .
    eq esDistinta(v, w) = not esIgual(v, w) .

    eq esMenor(v, v) = false .
    eq esMenor(A, v) = true .
    eq esMenor(v, A) = false .
    eq esMenor(E, v) = true .
    eq esMenor(v, E) = false .
    eq esMenor(I, v) = true .
    eq esMenor(v, I) = false .
    eq esMenor(O, v) = true .
    eq esMenor(v, O) = false .
    eq esMenor(U, v) = true .
    eq esMenor(v, U) = false .
endfm

***************** NOMBRE *******************
fmod ARBOL is
***************** NOMBRE *******************
protecting BOOL .
protecting NATURAL .
protecting VOCAL .
sort A .

***************** SINTAXIS *****************
op arbolVacio : -> A .
op esVacio : A -> Bool .
op construir : V A A -> A .
op construirRaiz : V -> A .
op numNodos : A -> N .
op altura : A -> N .
op MAX : N N -> N .
***************** SEMANTICA ****************
var a a1 a2 : A .
var n m : N .
var v : V .
   
eq esVacio(construir(v, a1, a2)) = false .
eq esVacio(arbolVacio) = true .

eq construirRaiz(v) = construir(v, arbolVacio, arbolVacio) .

eq MAX(n, cero) = n .
eq MAX(cero, n) = n .
eq MAX(sucesor(m), sucesor(n)) = sucesor(MAX(m, n)) .
eq altura(arbolVacio) = cero .
eq altura(construir(v, a1, a2)) = sucesor(MAX(altura(a1), altura(a2))) .

eq numNodos(arbolVacio) = cero .
eq numNodos(construir(v, a1, a2)) = sucesor(suma(numNodos(a1), numNodos(a2))) .

endfm
