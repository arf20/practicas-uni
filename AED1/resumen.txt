1.
1.1. Resolucion del problema

Un ingieniero informatico resuelve problemas.

Las herramientas que usa son las estructuras de datos y algoritmos.

Las estructuras de datos son la parte estatica del problema, representan los datos de entrada, salida e intermedio (estado). 

Los algoritmos son la parte dinamica, que manipula los datos para obtener la solucion.


1.1.1. Analisis de problema
 - analisis de requisitos (ambiguos...)

1.1.2. Modelado del problema y algoritmos abstractos
 - modelo abstracto del problema, mental
 - analogía con algo conocido previamente
 - algoritmos informales, idea vaga

1.1.3. Diseño de la solucion
 - siempre previo a implementacion
 - tipos de datos abstractos, no como se representan
 - algoritmos en pseudocodigo

1.1.4. Implementación del diseño
 - especificación, parte de diseño
 - que, como, donde programar las cosas
 - de tipos a estructuras de datos especificas en el lenguaje
 - implementacion de algoritmos en un lenguage concreto

1.1.5. Verificacion y evaluacion
 - verificar, corregir, repetir
 - todos los pasos de la resolucion
 - analisis de eficiencia

1.2. Tipos de datos
Definiciones

1.2.1. Tipo de datos, tipo abstracto y estructura
 - Tipo de datos abstracto (TAD): dominio abstracto de valores y conjunto de operaciones sobre ellas. Ocultacion de implementacion.
 - Tipo de datos: conjunto de posibles valores de una variable y operaciones sobre ella
 - Estructura de datos: representacion en memoria de datos

1.2.2. Tipos de tipos
 - Primitivos: definidos por el lenguaje (int)
 - Definidos por el usuario

 - Tipo simple: unico valor en instante
 - Compuesto: union de varios tipos

 - Mutables
 - Inmutables: su valor no puede cambiar


1.2.3. Repaso de tipos
 - enteros
 - reales
 - caracteres
 - cadenas
 - booleanos

 - listas
 - pilas
 - colas

 - puntero: direccion a una variable (valor especial nulo)
    - indirección
    - dirección
    - aritmetica

1.3. Algoritmos y algoritmica
Serie de reglas que con datos de entrada produce una salida que cumple:
 - definibilidad
 - finitud

 - determinista
 - indeterminista

1.3.2. Analisis de algoritmos
Eficiencia: resultados/consumidos

 - Por calidad del resultado
 - Por recursos consumidos

Recursos
 - Factores externos
 - Tamaño del problema
 - Contenido de los datos de entrada

Notacion
 - tiempos de ejecucion
 - N instrucciones...

 - O-grande: cota superior asintotica...

1.3.3. Diseño de algoritmos
 - Interpretacion a partir de elementos genericos
 - Solcuionar elementos genericos
 - Esquema algoritmico combinando estos elementos

Tecnicas:
 - Divide y vencerás
 - Voraces
 - Programacion dinamica
 - Backtracking
 - Ramificacion y poda
 - Minimax y alfa-beta

1.3.4. Descripcion del pseudocodigo utilizado
...

1.4. Consejos para una buena programación
Evitar codigo spaghetti, gigante monolitico

1.4.1. Importancia de diseño y analisis [redundante]
Ingienería del software

1.4.2. Modularidad: encapsulación y ocultamiento
Utilizar modulos, paqutes, clases, etc
que agrupan funcionalidades relacionadas: encapsulación

Ocultación: interface opaca a operaciones

1.4.3. Otros
 - Reulitizar programas
 - Resolver casos generales
 - Repartir bien funcionalidad en todos los niveles
 - Simplificar


2. Abstracciones y especificaciones
2.1. Las abstracciones en programación
Los niveles de abstracción

2.1.1. Diseño mediante abstracciones
Pasos
 - Identificar subproblemas
 - Especificar subproblemas de forma abstracta
 - Resolver cada subproblema
 - Unir las soluciones y verificar problema

2.1.2. Mecanismos de abstracción: especificacion y parametrización

Las funciones y tipos de datos son descritas en especificaciones opcionalmente parametrizadas
(que se den en funcion de parametros). Especificación y parametrizacion no tienen por que ir
juntas.

 - Especificación: Distinguir lo relevante de lo que no. Descripción del efecto o resultado.
    No el como. (la mas usada)
   
    - Principio de la ocultación de la implementación.
    - Encapsulación: Operaciones y tipos relacionados son agrupados en modulos o paquetes.
       - Modulo: abstraccion de abstracciones, mas alto nivel

 - Parametrización: Parametrizado de manera que el significado no es fijo
    - Parametrizacion de tipo: templates

2.1.3. Tipos de abstracciones: funcional, de datos e iteradores

 - Abstracciones funcionales (funciones, trozos de codigo). 
   Especifica parametros de entrada, salida, y efecto. No se indica implementación.
   
 - Abstracciones de datos.
   Dominio de valores y sus operaciones. 
   Tipo abstracto de datos (TAD). Especificaciones de TADs.
   
    - Tipos contenedores y parametrizados.
      Clase de TAD: contenedores y colecciones, contienen valores de otros tipos.
      Arrays, colas, listas, arboles...

 - Abstracciones de iteradores.
   Recorrer (TADs) de forma abstracta (como en C++) (foreach...)

2.1.4. Mecanismos de abstraccion en los lenguajes de programacion

 - Tipos definidos por el usuario (typedef)
 - Modulos y encapsulamiento (archivos?) (ocultación de implementación)
 - Clases y objetos
    - Lo mas usado hoy en dia TADs, en POO.
    - Clase: tipo definido por el usuario y modulo que encapsula datos y operaciones.
    - Objecto: Instancia de clase
    - Ocultación de información con los atributos de acceso (public, private, etc)
    - Acceso uniforme con el operador '.'.
    - Parametrizacion con templates (genericos).


2.2. Especificaciones informales

Lenguaje natural (ambiguo, impreciso

 - Notación de especificación formal o informal: 
   define partes, opcionalidad, significado, tipo...
   gran variedad adaptada a lenguajes de programacion concretos.

2.2.1. Especificacion informal de abstracciones funcionales

 - Nombre de la función
 - Parametros de entrad
 - Requisitos para ejecutarla
 - Descripcion del resultado

2.2.2. Especificacion informal de abstracciones de datos

 - Nombre del TAD
 - Parametrizaciones
 - Lista de operaciones sobre el TAD
 - Especificacion de cada operacion

2.2.3. Especificacion informal de abstracciones de iteradores
No existe consenso sobre este

En caso de que el lenguaje acepte pasar funciones como parametros,
el iterador puede definirse como una abstracción funcional




