Introducción a los Sistemas Operativos       Angel R. Fernandez, G2.2, Nov 2024
======================================

TEMA 1: Introducción
===============================================================================
...

TEMA 2: Gestion de Procesos
===============================================================================

INTRODUCCIÓN

Instancia de programa, recursos asociados (stack, heap)
Pseudoparalelismo

Cambios
 - Cambio de proceso:  Cambiar de proceso a otro
 - Cambio de contexto: Cada vez que se intercambia el estado de la CPU
   Implicado por cambio de proceso, cambio de modo y cambio de hilo
 - Cambio de modo:     Entre kernel y user mode

Creacion
 - fork():   Clonar proceso
 - execve(): Reemplazar imagen del proceso actual por otro programa
   Conserva archivos abiertos, handlers de señales y PID... etc

Destrucción
 - Por excepción (i.e. div 0) o señal (SIGSEGV, SIGINT, SIGTERM, SIGKILL...)
 - exit():  Terminación voluntaria propia
 - kill():  Terminación por otro proceso involuntaria, envía señal

ESTADOS
 - Listo:       Esperando ser planificado
 - Bloqueado:   Esperando I/O
 - Ejecución

IMPLEMENTACIÓN

Tabla PCB (Process Control Block) con toda la info

Creación
 - fork()
 - Kernel crea entrada en PCB con PID
 - Copia del proceso padre (menos PID, segmentos, heap+stack...)
 - Se asigna heap, copia segmento de datos, se comparte seg de datos con padre
 - Incrementar contadores de archivos abiertos del padre
 - Estado listo, devuelve PID al padre, 0 al hijo

Estructura
Como las interrupciones son dentro del mismo proceso, se considera que
tienen parte usuario y parte kernel, compartida entre todos los procesos

Cambio de proceso
 - push PC al stack
 - kernel mode, carga PC desde el vector de interrupciones (IVT)
 - en ensamblador, guardar contexto a la PCB (registros, etc) y mas metadatos
 - configurar stack del kernel (cada proceso tiene stack para kernel mode)
 - comprobar syscall, leer IDT, ejecutar ISR, llama a handler en C
   posible bloqueo (cambio de estado)
 - se decide si es necesario llamar al planificador, se llama y decide cual
   de los listos ejecutar mirando PCB
 - restauración de contexto del proceso a ejecutar (incluye PC)
 - cambio a modo usuario, return de llamada, pop de la siguiente instruccion

HILOS (threads)

Unidad de planificación y ejecución
No hay protección entre hilos
 - Estado
 - Contexto
 - Pila (variables locales)
 - Memoria compartida
(Procesos: Unidad de Propiedad de Recursos)
 - Zona de memoria (espacio de direcciones
 - Acceso protegido
 - Globales, procesos hijos, señales...
 - Info contable

Aplicaciones
 - Multiprogramación concurrente
 - Comunicación rapida
 - Bloquear
 - Rapido de crear destruir
 - Aprovechar planificador
 - Faciles

Hilos en modo usuario vs modo nucleo (habitual)
 ...

PLANIFICACIÓN
 - Equidad
 - Eficiencia: E = T_util / (Tutil + Tociosa + Tgestion)
 - Tiempo de espera: Tiempo desde que entra hasta que se ejecuta
 - Tiempo de respuesta: Tiempo entre que solicita y llegan resultados
 - Tiempo de regreso: Tiempo entre ejecución y resultados (lotes)
 - Rendimiento

Apropiativo: la CPU se le puede arrebatar al proceso

Algoritmos de Planificación
 - FCFS (First Come First Served); No apropiativo
   Si entran a la vez, menor PID
 - SJF (Shortest Job First): El trabajo mas corto primero; No apropiativo
   Estimar por proceso: E_t = a*E_{t-1} + (1-a)*T_{t-1}
     a: credibilidad, E_{t-1} estimación anterior, T_{t-1}: duración rafaga
     anterior, E_t: estimación
 - SRTF (Shortest Remaining Time First): El menor tiempo restante primero
   SJF pero apropiativo
 - RR (Round Robin, "Circular"): apropiativo, basado en quantum
   Se cambia de proceso cuando
    * se consume el quantum
    * Termina
    * Bloquea
 - Prioridad: procesos con mayor prioridad toman la CPU
 - Multiples colas & Realimentación: por tipo, prioridad, etc
   Reglas especificas
   
Plazo
 - Corto: Procesos en memoria
 - Medio: Intercambio entre memoria y disco (suspension y reanudación)
 - Largo: Decidir entre trabajos por lotes


TEMA 3: Seguridad y Protección
===============================================================================

SEGURIDAD
Ha de tener 3 cosas:
 - Confidencialidad: Elementos información leible solo por usuarios autorizados
 - Integridad: Elementos mutable solo por usuarios autorizados
 - Disponibilidad: Elementos disponibles solo para usuarios autorizados

Amenazas: tipos
 - Interrupción (DoS)
 - Intercepción (Spyware)
 - Modificación (MitM)
 - Invención (Ingienería social)

Amenazas: elementos
 - Hardware:        Disponibilidad
 - Software:        Disponibilidad, Confidencialidad, Integridad
 - Datos:           Disponibilidad, Confidencialidad, Integridad
 - Comunicaciones:  Disponibilidad, Confidencialidad, Integridad

Ataques genericos (pentesting)
i.e.
 - Leer memoria reservada
 - Hacer cosas invalidas, parametros, no razonables
 - Hacer cosas no previstas o prohibidas
 - Engañar a personas

Ataques especificos
 - Bomba logica
 - Backdoor
 - Buffer overflow
 - Troyanos
 - Gusanos
 - Spyware
 - Rootkit

Diseño
 - Publico
 - Default NO ACCESO
 - Verificación de autorización actual, no solo al abrir
 - Minimo privilegio posible
 - Mecanismo de protección simple, uniforme, integrado
 - Psicologicamente aceptable

PROTECCIÓN
Ha de tener 3 cosas:
 - Modos de ejecución
   kernel mode (x86 real), user mode (protected)
 - Protección de memoria
    - Memoria virtual: Paginación, cada proceso tiene su espacio de
      direccionamiento privado
 - Interrupciones
   Para que
    - los procesos llamen al S.O. a traves de syscalls
    - el S.O. pueda interrumpir los procesos

Política: operaciones posibles
Mecanismo: como se hará cumplir lapolitica, generales

Dominios de protección
 Cada objeto tienen un nombre de referencia, y conjunto de operaciones posibles
 Elementos sin ningún acceso no necesitan ser posibles de acceder
 Mecanismo: conjunto de parejas (objeto, derechos) i.e. fname y rwx
 Un mismo objeto puede estar en varios dominios    i.e. usuarios y grupos

Matriz de acceso: ineficiente
            FICHEROS[]
DOMINIOS[]  permisos

Listas de Control de Acceso (ACLs)
 Cada objeto tiene una lista de pares (dominio, derechos (rwx y más especificos)
 Guardado en el FS
 Operaciones en el kernel
 Aplicable a grupos, criterio grupo-usuario
 Solo se comprueba cuando se abre el archivo

Lista de posibilidades
 Matriz que asocia por filas dominio con lista de objetos accesibles y derechos
 Cada proceso tiene una lista actual
 Indexado por fd
 Cuando se abre un archivo, se consula ACL, y se crea una posibilidad; 
 que se destruye cuando se cierra

ACL: necesidades de usuario
Posibilidades: que objetos puede acceder un proceso
 Unix combina ambas

Registro con posibilidades de cada objeto consume mucha MEMORIA, soluciones:
 -> Cada posibilidad apunta a un objeto indirecto, para poder romper conexiones
 -> Asignar numero aleatorio a cada objeto y almacenarlo en posibilidad

AUTENTICACIÓN DE USUARIOS

Validación, identificación, autentificación -> autorización
identificador + contraseña
 -> autorizado al sistema
 -> privilegios acordados con usuario o grupo

Contraseñas
 crypt(): $tipo$salt$hash
 i.e. MD5, SHA512, bcrypt: unidireccionales
 guardadas en /etc/shadow (historicamente en /etc/passwd)

Elección de contraseñas
 - Instrucción de usuario
 - Inspección proactiva

PROTECCIÓN EN UNIX

Dominios
 uid + gid: /etc/group
 pueden haber varios usuarios con mismo uid y gid
 uid y gid 0 es root (sudo...)

ACLs restringidas
 Todo es un archivo
 Todos los archivos pertenecen a un uid y gid
 ACLs: propietario, grupo y otros
 Algunos FS implementan ACLs completas para usuarios y grupos concretos
 Comprobación
  - uid eq -> propietario
  - gid eq -> grupo
  - else   -> otros

Cambio de dominio
 Procesos se ejecutan con uid,gid del usuario que lo lanza pero
 setuid,setgid permiten iniciar con el uid y gid del propietario del ejecutable
 euid,ugid: efectivas


TEMA 4: Sistemas de Ficheros
===============================================================================

1. INTRODUCCIÓN

Almacenamiento secundario
 - gran capacidad
 - persistente
 - concurrente
Array de bloques plano -> abstracciones -> ficheros y directorios


2. FICHEROS

Unidad logica de almacenamiento, secuencia de bytes. OS solo entiende exec
Nombrado, criterio de OS - extensiones
Tipos
 - Regular i.e. texto, binario
 - Directorio: lo entiende el OS
 - Especial caracter I/O
 - Especial bloque: dispositivo de almacenamiento

Acceso
 - Secuencial (read/write)
 - Aleatorio (lseek)
Especiales caracteres solo secuenciales (como pipes)

Atributos
 - Protección: uid, gid, permisos rwx por usuario, grupo... etc
 - Flags: ro, temp, lock...
 - Tiempos. ctime, atime, mtime
 - Tamaño

Operaciones
 - mknod (regular), creat?
 - open (mode)
 - close
 - read
 - write
 - lseek
 - truncate
 - stat
 - getattr
 - setattr
 - rename
 - chmod
 - chown
 - link
 - unlink
 ...


3. DIRECTORIOS

Sistema jerarquico en arbol de directorios que agrupan ficheros

Ruta
 - Absoluta
 - Relativas multiples
 - . y ..

Operaciones
 - mknod (directory) o mkdir
 - rmdir
 - getdents o readdir (POSIX/libc)
 - rename (tb mueve)
 - link
 - unlink
 - getattr
 - setattr
 - stat
 - chmod
 - chown
 ...


4. IMPLEMENTACIÓN

Dispositivos de bloques son arrays secuenciales de bloques de tamaño fijo
Sectores fisicos direccionados por LBA, en el FS se organizan en clusteres

Implementación de ficheros
 Conjunto de bloques, el cual se lleva un registro (implementación)
 - Asignación contigua: mas rapida, facil                          i.e. ISO9660
   Impracticable generalmente -> fragmentación externa (del espacio libre)  
 - Lista enlazada: Cada bloque guarda dirección del siguiente      i.e. BRFS
   No hay fragmentación externa
   Solo hace falta dirección del primer bloque en el dirent
   Muy lento si hay que leer el final, tamaño de bloque no es potencia de 2
 - Lista enlazada e indice: Misma idea -> tabla (indice) donde se  i.e. FAT
   guardan las direcciones siguientes de cada bloque indexado por direción de 
   bloque
   Ineficiente con volumenes grandes, agrandar tamaño de bloque pospone el 
   problema y crea fragmentación interna
   Inconsistencias (?)
 - inodes (nodos-i)                                                i.e. ext2
   Cada fichero tiene un bloque indice (inode)
   inode: bloque con la lista de direcciones de bloque en orden del fichero
    La mayoría de ficheros son pequeños, inodes desperdicia muchos bloques
     -> inodes pequeños, y varios por bloque
    Contienen atributos y direcciones de bloques
   dirent: nombre de fichero y dirección de inode
   Inodes solo se leen cuando se abre el fichero, el resto del tiempo no tiene
   que estár en memoria

   Para ficheros grandes con inodos muy grandes -> bloques indirectos
   Una de las entradas del inode será un BSI (Bloque Simplemente Indirecto)
   con más direcciones a bloques de datos
   Posibilidad de BDI o BTI (doble y triple (Unix) indirección )

   En UFS también guarda los atributos

Implementación de directorios
 - MS-DOS: Estructura fija, nombre 8.3, flags, tiempo, primero bloque, tamaño
    -> FAT[12,16,32],vFAT,exFAT
   Directorio raiz en una posición fija del disco
 - Unix (16 bytes) out of scope
 - ext4
    - int32     inode
    - int16     rec_len
    - u8        file_type {unk, reg, dir, char, block, fifo, socket, symlink}
    - char[255] name
    
   rec_len (longitud de registro) es por si renombramos la entrada, no
   desperdiciar bytes; si es multiplo de 4, es frecuente que queden bytes para
   renombrarlo;
   y para gestión del tamaño libre dentro del directorio. el tamaño libre
   se guarda en la entrada de '.'; == . y .. no son entradas reales

Resolución de rutas (i.e. /usr/ast/mbox)
 - Buscamos en el directorio raiz la entrada de /usr
 - Del inode obtenemos la dirección de datos de /usr
 - Buscar entrada ast
 - Del inode de ast obtenemos la dirección de datos de ast
 - Buscamos entrada mbox
 - Obtenemos dirección de datos de mbox del inode
 - Accedemos a los datos de mbox

Ficheros compartidos
 Fichero accesible desde varios directorios
 - Enlace fisico (hard link): varios dirent van al mismo inode
   Contador de enlaces en el inode
 - Enlace simbolico (soft link): tipo especial de fichero que guarda ruta a
   otro fichero; si el fichero que apunta no existe, falla;
   mayor coste temporal: 2 resoluciones, y espacial: 2 inodes
   pero son mas flexibles

Administración de espacio en disco
 - Tamaño de bloque logico
   Bloque fisico (sector) fijo (512B) -> cluster o bloque logico, varios
   i.e. 4KB; grande: fragmentación, pequeño: lento
   optimizar tasa de transferencia

 - Registro de bloques libres
    - Lista enlazada de bloques
    - Mapa de bits (n bloques -> n bits) *** mas utilizada (ext3,4, NTFS)


5. CACHE DE DISCO

Mas lento que memoria(), la implementa el OS, bloques del disco se mantienen
temporalmente en memoria

Cuando se lee, se comprueba la caché, si es miss, se carga del disco a la cache
Si la caché está llena se expulsan bloques al disco (dirty sync) por LRU con 
listas enlazadas; LRU modificado para mantener la consistencia del FS:
 - Probabilidad de vover a necesitar bloque
   Los recién usados probablemente no, al final de la LRU
 - Bloque esencial para la consistencia
   Si es inode o mapa de bits y está dirty, se syncea al disco inmediatamente
   sin expulsar de la memoria
Además los bloques de datos se mantienen hasta un maximo de tiempo en cache
para no perder información: Unix: datos 30s, metadatos 5s

Con sync fuerzas que todos los bloques dirty se escriban


6. DISCOS Y SISTEMAS DE FICHEROS

Particiones
 Zona lineal de bloques consecutivos del disco en bloques fisicos
 Información (numero, sector inicio, sector final, tipo)
 se guarda en estructura (disk label)
 - Master Boot Record (MBR): bloque 0, 4 particiones
 - GUID Partition Table (GPT): nuevo, 128 particiones

Estructura de sistema de ficheros MBR

 +------------------------------------------+ Disk
 | MBR                                      |  Partition
 | | Superblock ext                         |
 | | Bitmap inode free (I/8*TB blocks)      |
 | | |                                      |
 | | inode table (I*T1/TB blocks)           |
 | | |                                      |
 | | |                                      |
 | | |                                      |
 | | free block table (B/8*TB blocks)       |
 | | |                                      |
 | | |                                      |
 | | <data blocks>                          |
 | | *                                      |



